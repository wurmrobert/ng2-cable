{"version":3,"file":"ng2-cable.js","sourceRoot":"","sources":["../src/ng2-cable.ts"],"names":[],"mappings":"OAAO,KAAK,WAAW,MAAM,aAAa;OACnC,EAAE,aAAa,EAAE,MAAM,iBAAiB;OACxC,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe;OAC7C,EAAE,WAAW,EAAE,MAAM,eAAe;AAG3C;IAIC,yBAA8B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAFnD,aAAQ,GAAQ,EAAE,CAAC;QAGzB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,mCAAS,GAAT,UAAU,OAAY,EAAE,MAAW;QAAX,sBAAW,GAAX,WAAW;QAClC,IAAI,WAAW,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;QACjF,IAAI,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,MAAM,CAAC,CAAC;QACrE,IAAI,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;QACpC,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,EAAE;YACtE,QAAQ,EAAE,UAAC,IAAS;gBACnB,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC1C,CAAC;SACD,CAAC,CAAC;QAGH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG;YAC5B,YAAY,EAAE,YAAY;YAC1B,WAAW,EAAE,WAAW;SACxB,CAAC;QACF,MAAM,CAAC,WAAW,CAAC;IACpB,CAAC;IAED,qCAAW,GAAX,UAAY,OAAe;QAC1B,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACzC,OAAO,CAAC,KAAK,CAAC,6CAA2C,OAAO,qBAAkB,CAAC,CAAC;QACrF,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC;YACvD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC/C,CAAC;IACF,CAAC;IAED,iCAAO,GAAP,UAAQ,OAAe,EAAE,MAAc,EAAE,IAAS;QACjD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC;IAED,iCAAO,GAAP,UAAQ,GAAW;QAClB,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,oCAAU,GAAV;QACC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;IACzB,CAAC;IACK,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,8BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;KACxD,EAF6F,CAE7F,CAAC;IACF,sBAAC;AAAD,CAAC,AAvDD,IAuDC","sourcesContent":["import * as ActionCable from 'actioncable';\nimport { Configuration } from './configuration';\nimport { Injectable, Optional } from '@angular/core';\nimport { Broadcaster } from './broadcaster';\n\n\nexport class Ng2CableService {\n\tpublic cable: any;\n\tpublic channels: any = {};\n\n\tconstructor(  public readonly configuration: Configuration) {\n\t\tthis.connect(configuration.url);\n\t}\n\n\tsubscribe(channel: any, params = {}): Broadcaster {\n\t\tlet channelName = (typeof (channel) === 'object') ? channel['channel'] : channel;\n\t\tlet subscriptionParams = Object.assign({ channel: channel }, params);\n\t\tvar broadcaster = new Broadcaster();\n\t\tlet subscription = this.cable.subscriptions.create(subscriptionParams, {\n\t\t\treceived: (data: any) => {\n\t\t\t\tbroadcaster.broadcast(data.action, data);\n\t\t\t}\n\t\t});\n\n\n\t\tthis.channels[channelName] = {\n\t\t\tsubscription: subscription,\n\t\t\tbroadcaster: broadcaster\n\t\t};\n\t\treturn broadcaster;\n\t}\n\n\tunsubscribe(channel: string): void {\n\t\tif(!this.channels[channel].subscription) {\n\t\t\tconsole.error(`Unable to unsubscribe channel with name ${channel} from ng2-cable!`);\n\t\t} else {\n\t\t\tlet subscription = this.channels[channel].subscription;\n\t\t\tthis.cable.subscriptions.remove(subscription);\n\t\t}\n\t}\n\n\tperform(channel: string, action: string, data: any): void {\n\t\tthis.channels[channel].subscription.perform(action, data);\n\t}\n\n\tconnect(url: string): any {\n\t\tthis.cable = ActionCable.createConsumer(url);\n\t\tthis.cable.connect();\n\t\treturn this.cable;\n\t}\n\n\tdisconnect(): void {\n\t\tthis.cable.disconnect();\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Configuration, decorators: [{ type: Optional }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}